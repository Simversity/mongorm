{"name":"Mongorm","tagline":"Mongo based ORM","body":"#### Introduction\r\n\r\nNoSQL databases like MongoDB are a hot tool these days. The ease of usage and the speed of development make them the right choice of tool for most of application use cases. The fact that you can dump any JSON (read BSON) data to databases is the real advantage over tight physical schemas. But the lack of data integrity and validations could mean that all the validations and datatype checks have to re-implemented at the application layer.\r\n\r\nMongorm is a lightweight ORM available to perform basic data type checks and constraint validations. It can be imported to create a base class used to define models that represent a collection in the database. ORM also provides a bunch of default datatypes that can be used alongside any custom datatypes that you may want to provde.\r\n\r\nIn a regular use case you would create a new collection and store stuff as:\r\n```python\r\ncollection = pymongo.MongoClient().sample_database.sample_coll\r\n```\r\n\r\n\r\nIf you have already read the party document, you would be using dbapi instead of the MongoClient approach. Something like:\r\n```python\r\ncollection = dbapi(dbapi.sample_database, \"sample_coll\")\r\n```\r\nA regular update operation would look like\r\n```python\r\ncollection.insert({\"data\": \"hello\", \"data_list\": [1]})\r\ncollection.update({\"data\": \"hello\"}, {\"$set\": {\"data_set\": 2}})\r\n```\r\n\r\nIf you notice, the data type of data_list has changed from a list to a string withour any errors.\r\nIdeally you would like an error to be raised but pyMongo would not do that. Simtools' ORM solves this for you.\r\n\r\nA quick re-implementation of the above requirement will looks like this.\r\n```python\r\nfrom simtools.orm.base import ModelBase\r\nfrom simtools.orm.datatypes import Unichar, List\r\n\r\n\tclass SampleModel(ModelBase):\r\n\t    __tablename__ = \"sample_coll\"\r\n\t    __rid__ = \"SAMPL\"\r\n\r\n\t    data = Unichar(nullable=False)\r\n\t    data_list = List(default=[], nullable=False)\r\n\r\n\t    @classmethod\r\n\t    def using(cls):\r\n\t        return pymongo.MongoClient().sample_database\r\n\r\n\r\n\tsm = SampleModel.insert({\"data\": \"hello\", \"data_list\": [1]})\r\n\r\n\tSampleModel.update({\"data\": \"hello\"}, {\"$set\": {\"data_list\": 2}})\r\n```\r\n\r\nThis would duly raise an error which says that datatype does not match. How wonderful !!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}